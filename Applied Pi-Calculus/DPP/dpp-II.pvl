(**
Device Provisioning Protocol (DPP-II) is a Wi-Fi Alliance specification and also known
as 'Wi-Fi CERTIFIED Easy Connect™'. The protocol aims to provide a user-friendly way
to provision diverse IoT devices to secure Wi-Fi securely. DPP refers the new
out-of-the-box device as Enrollee. A logical entity that configures the enrollee
to the secure Wi-Fi is called Configurator . It could be an application on a device.
DPP uses four sub-protocols and works in the following phases:
1. Bootstrapping: The enrollee announces its presence by sending its Bootstrapping-public
   key (and some metadata) to the configurator using an out-of-the-band mechanism. It can
   be done by scanning a QR code, an NFC tap, or a bluetooth exchange.
2. Authentication Protocol: DPP defines two roles 'Initiator' and 'Responder'. Either
   configurator or enrollee can act as initiator and initiate the authentication phase.
   We have considered configurator as an initiator for implementation purposes in this paper.
   Both configurator and enrollee have two public-private key pairs: bootstrapping and protocol
   keys. In this phase configurator and enrollee perform an ECDH (Elliptic-curve Diffie–Hellman)
   handshake using the public-private key pairs to establish a common secret session key. After
   receiving the enrollee's presence announcement configurator initiates the authentication by
   sending a DPP-authentication-request encrypted by an ephemeral intermediate ECDH key. The
   authentication request contains a nonce. The enrollee returns the nonce as part of its DPP-
   authentication-response and proves that it possess the private key corresponding to the
   bootstrapping public received by the configurator in bootstrapping phase. After receiving the
   correct nonce, the configurator sends a DPP- authentication-confirm message and authenticates
   the enrollee.
3. Configuration Protocol: Once the enrollee is authenticated, it sends a DPP configuration request
  (requesting configurator for its configuration information) encrypted by the session key. The
  configurator responds with the configuration credential in the form of a configuration object
  secured by the session key. The configuration object could be a passphrase, password, or a DPP
  connector. In our implementations, the DPP connector has been taken as the configuration object.
	DPP connector is basically a certificate from the configurator, containing the public-protocol
  key of the enrollee signed by the configurator. Using this, the enrollee can connect to the
  network and the other devices on the network.

4. Network Access: After receiving the connector, the enrollee sends it to the access point.
  The access point verifies the DPP connector using the configurator's public sign key. If it is
  configured by the same configurator it will successfully verify the connectors and enrolle will
  join the network. Similarly, the device can connect to other devices on the network using the DPP
  connector.


**)




set preciseActions = true.
set traceDisplay=long.
free c:channel.

type nonce.
type host.
(* Symmetric key encryption *)
type key.
fun senc(bitstring, key): bitstring.

reduc forall m: bitstring, k: key; sdec(senc(m,k),k) = m.

(* Asymmetric key *)
type skey.
type pkey.
fun pk(skey): pkey.
fun aenc(bitstring, pkey): bitstring.
reduc forall m: bitstring, sk: skey; adec(aenc(m,pk(sk)),sk) = m.

(* Digital signatures *)
type sskey.
type spkey.
fun spk(sskey): spkey.

fun sign(bitstring, skey): bitstring.

reduc forall m: bitstring, sk: skey; getmess(sign(m,sk)) = m.
reduc forall m: bitstring, sk: skey; checksign(sign(m,sk),pk(sk)) = m.
fun PRF(bitstring): key.
reduc forall h:host,np:nonce,ns:nonce,ms:key;
KeyGen(h,np,ns,ms)=PRF((h,ms,np,ns)).
fun HSH(bitstring): bitstring.
fun H(pkey): bitstring.
(*New functions from here for DPP*)
fun concat(bitstring, pkey): bitstring.
fun concatstr(bitstring, bitstring): bitstring.
fun concatstrs(nonce, nonce, pkey, pkey, pkey, bitstring): bitstring.
fun concatnonce(nonce, nonce): bitstring.
fun sha256(bitstring): bitstring.

fun ecDfHm(skey,pkey):bitstring.
reduc forall sb: skey, sp: skey ; ecDfHm2(sb,pk(sp))=ecDfHm(sp,pk(sb)) .
fun HKDF(bitstring,bitstring): key.
fun HKDFextract(bitstring,bitstring): bitstring.
fun HKDFextractkey(bitstring,bitstring): key.

const first_ikey_const:bitstring[data].
const second_ikey_const:bitstring[data].
const chirp:bitstring.
const cnst0:bitstring.
const cnst1:bitstring.
const dppkylen:bitstring.

const ClientK_secr:bitstring [private].
const ServerK_secr:bitstring [private].
const ServerK_m_secr:bitstring [private].
const ClientK_m_secr:bitstring [private].
(*const Voucher:bitstring [private]. *)


(*const SessionID:bitstring.*)
(*free Sid:bitstring.
free Pa:bitstring.*)
free hostC,hostE1,hostE2:host.
free Sn,Issuer:bitstring.
(*free k1,PMSm:bitstring[private].*)

free keScrt,ke2Scrt,keempl1Scrt,keempl2Scrt:bitstring[private].



event configuratorEnrollee1Complete(key). (*Reachability*)
event configuratorEnrollee2Complete(key). (*Reachability*)
event enrolleeComplete(key). (*Reachability*)
event enrollee2Complete(key). (*Reachability*)
event acceptConfigEnrolleeKey1(key). (*Authentication*)
event termEnrollee1(key). (*Authentication*)
event acceptConfigEnrolleeKey2(key). (*Authentication*)
event termEnrollee2(key). (*Authentication*)
event acceptEnrollee1(key). (*Authentication*)
event termConfig1(key). (*Authentication*)
event acceptEnrollee2(key). (*Authentication*)
event termConfig2(key). (*Authentication*)





let Configurator(hostC:host, skC:skey, pkCA:pkey, sbI:skey, spI:skey, pbR1:pkey,ppR1:pkey, pbR2:pkey,ppR2:pkey)=
in(c, (strhash:bitstring) );
if strhash=sha256(concat(chirp,pbR1)) then
new Ni:nonce;
new capi:bitstring;
let M= ecDfHm(spI,pbR1) in
let k1= HKDF(first_ikey_const,M) in

out(c, (H(pbR1),H(pk(sbI)),pk(spI),senc((Ni,capi), k1) ));
in(c, (dpp_status_e:bitstring,=H(pbR1),=H(pk(sbI)),=ppR1, enc_response:bitstring ));

let N=ecDfHm2(spI,ppR1) in
let k2= HKDF(second_ikey_const,N) in
let (Nr:nonce,=Ni,capr:bitstring,enc_rauth:bitstring)=sdec(enc_response,k2) in
let bk= HKDFextract(concatnonce(Ni,Nr),concatstr(M,N)) in
let ke= HKDFextractkey(bk,dppkylen) in
if HSH( concatstrs(Ni,Nr,pk(spI),ppR1,pbR1,cnst0) )=sdec(enc_rauth,ke) then
let Iauth=HSH( concatstrs(Nr,Ni,ppR1,pk(spI),pbR1,cnst1) ) in
new dpp_status_i:bitstring;
event acceptConfigEnrolleeKey1(ke) ;(* configurated authenticate that he has Accepted the protocol run with employee1 with key ke*)


out(c, (dpp_status_i,H(pbR1),H(pk(sbI)), senc(Iauth,ke) ));
in(c, (enc_config_request:bitstring));
let (Ne:nonce,configAtrributes:bitstring)=sdec(enc_config_request,ke) in
new dpp_config_status_i:bitstring;
new configObject:bitstring;

out(c, (dpp_config_status_i, senc( (Ne,configObject), ke)));
in(c, (enc_config_result:bitstring));
let (dpp_config_status_r:bitstring, =Ne)=sdec(enc_config_result,ke) in
(*if Ne3=Ne then *)
out(c,(senc(keScrt,ke)));

event configuratorEnrollee1Complete(k2);
event termConfig1(k1);

in(c, (strhash2:bitstring) );
if strhash2=sha256(concat(chirp,pbR2)) then
new Ni2:nonce;
new capi2:bitstring;
let M2= ecDfHm(spI,pbR2) in
let k1_2= HKDF(first_ikey_const,M2) in

out(c, (H(pbR2),H(pk(sbI)),pk(spI),senc((Ni2,capi2), k1_2) ));

in(c, (dpp_status_e2:bitstring,=H(pbR2),=H(pk(sbI)),=ppR2, enc_response2:bitstring ));

let N2=ecDfHm2(spI,ppR2) in
let k2_2= HKDF(second_ikey_const,N2) in
let (Nr2:nonce,=Ni2,capr2:bitstring,enc_rauth2:bitstring)=sdec(enc_response2,k2_2) in
let bk2= HKDFextract(concatnonce(Ni2,Nr2),concatstr(M2,N2)) in
let ke2= HKDFextractkey(bk2,dppkylen) in
if HSH( concatstrs(Ni2,Nr2,pk(spI),ppR2,pbR2,cnst0) )=sdec(enc_rauth2,ke2) then
let Iauth2=HSH( concatstrs(Nr2,Ni2,ppR2,pk(spI),pbR2,cnst1) ) in
new dpp_status_i2:bitstring;

event acceptConfigEnrolleeKey2(ke2); (*Authentication*)

out(c, (dpp_status_i2,H(pbR2),H(pk(sbI)), senc(Iauth2,ke2) ));

in(c, (enc_config_request2:bitstring));
let (Ne2:nonce,configAtrributes2:bitstring)=sdec(enc_config_request2,ke2) in
new dpp_config_status_i2:bitstring;
new configObject2:bitstring;

out(c, (dpp_config_status_i2, senc( (Ne2,configObject2), ke2)));
in(c, (enc_config_result2:bitstring));
let (dpp_config_status_r2:bitstring, =Ne2)=sdec(enc_config_result2,ke2) in
out(c,(senc(ke2Scrt,ke2)));
event termConfig2(k1_2);
event configuratorEnrollee2Complete(k1_2);

0.




let Enrollee1(hostE:host,skE1:skey,pkCA:pkey, sbR1:skey, spR1:skey, pbI:pkey, ppI:pkey) =
out(c, (sha256(concat(chirp,pk(sbR1)))) );
in(c, (hshbr:bitstring,hshbi:bitstring, =ppI, enc_request:bitstring));
if H(pk(sbR1))=hshbr then
if H(pbI)=hshbi then
let Me= ecDfHm2(sbR1,ppI) in
let ke1= HKDF(first_ikey_const,Me) in
let (Ni:nonce,capi:bitstring)=sdec(enc_request,ke1) in
new dpp_status_e:bitstring;

let N=ecDfHm(spR1,ppI) in
let k2= HKDF(second_ikey_const,N) in
new Nr:nonce;
let bk= HKDFextract(concatnonce(Ni,Nr),concatstr(Me,N)) in

let ke= HKDFextractkey(bk,dppkylen) in

let Rauth=HSH( concatstrs(Ni,Nr,ppI,pk(spR1),pk(sbR1),cnst0) ) in
new capr:bitstring;

event acceptEnrollee1(ke1);(*here configur authentication*)

out(c, (dpp_status_e,H(pk(sbR1)),H(pbI),pk(spR1), senc( (Nr,Ni,capr,senc(Rauth,ke)), k2) ));
in(c, (dpp_status_i:bitstring,=H(pk(sbR1)),=H(pbI), enc_iauth:bitstring) );
let (iauth_hsh)=sdec(enc_iauth,ke) in
if iauth_hsh=HSH(concatstrs(Nr,Ni,pk(spR1),ppI,pk(sbR1),cnst1)) then
new Ne:nonce;
new configAtrributes:bitstring;
out(c, (senc( (Ne,configAtrributes), ke)));

in(c, (dpp_config_status_i:bitstring, enc_config_response:bitstring ));
let (Ne2:nonce,configObject:bitstring)=sdec(enc_config_response,ke) in
if Ne2=Ne then
new dpp_config_status_r:bitstring;
out(c, (senc( (dpp_config_status_r, Ne), ke)));
out(c,(senc(keempl1Scrt,ke1)));
event termEnrollee1(ke);(*enrollee1 has terminated the protocol run with configurator with symmetric ket ke*)

event enrolleeComplete(ke1);
0.



let Enrollee2(hostE2:host, pkCA:pkey, sbR2:skey, spR2:skey, pbI:pkey, ppI:pkey) =
out(c, (sha256(concat(chirp,pk(sbR2)))) );

in(c, (hshbr2:bitstring,hshbi2:bitstring, =ppI, enc_request2:bitstring));

if H(pk(sbR2))=hshbr2 then
if H(pbI)=hshbi2 then

let Me2= ecDfHm2(sbR2,ppI) in
let ke1_2= HKDF(first_ikey_const,Me2) in
let (Ni2:nonce,capi2:bitstring)=sdec(enc_request2,ke1_2) in
new dpp_status_e2:bitstring;

let N2=ecDfHm(spR2,ppI) in
let k2_2= HKDF(second_ikey_const,N2) in
new Nr2:nonce;
let bk2= HKDFextract(concatnonce(Ni2,Nr2),concatstr(Me2,N2)) in

let ke2= HKDFextractkey(bk2,dppkylen) in
let Rauth2=HSH( concatstrs(Ni2,Nr2,ppI,pk(spR2),pk(sbR2),cnst0) ) in
new capr2:bitstring;

event acceptEnrollee2(ke1_2);(*here configur authentication*)


out(c, (dpp_status_e2,H(pk(sbR2)),H(pbI),pk(spR2), senc( (Nr2,Ni2,capr2,senc(Rauth2,ke2)), k2_2) ));

in(c, (dpp_status_i2:bitstring,=H(pk(sbR2)),=H(pbI), enc_iauth2:bitstring) );
let (iauth_hsh2)=sdec(enc_iauth2,ke2) in
if iauth_hsh2=HSH(concatstrs(Nr2,Ni2,pk(spR2),ppI,pk(sbR2),cnst1)) then
new Ne2:nonce;
new configAtrributes2:bitstring;
out(c, (senc( (Ne2,configAtrributes2), ke2)));

in(c, (dpp_config_status_i2:bitstring, enc_config_response2:bitstring ));
let (Ne2_2:nonce,configObject2:bitstring)=sdec(enc_config_response2,ke2) in
if Ne2_2=Ne2 then
new dpp_config_status_r2:bitstring;
out(c, (senc( (dpp_config_status_r2, Ne2), ke2)));

out(c,(senc(keempl2Scrt,ke2)));
event termEnrollee2(ke2);(*enrollee1 has terminated the protocol run with configurator with symmetric ket ke*)
event enrollee2Complete(ke1_2);
0.
